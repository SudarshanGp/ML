df
rp <- ggplot(df, aes(x=df$temp_x))
rp
rp <- rp + geom_line(aes(y=df$rerun_tr, colour = "Training Accuracy without NA"))
rp
rp <- rp + geom_line(aes(y= df$rerun_ts, colour = "Test Accuracy without NA"))
rp <- rp + geom_line(aes(y= df$rerun_tr1, colour = "Training Accuracy with NA"))
rp <- rp + geom_line(aes(y= df$rerun_ts1, colour = "Testing Accuracy with NA"))
rp
rp <- ggplot(df, aes(x=df$temp_x), ylim= range(c(0.5, 1.0)))
rp
rp <- rp + geom_line(aes(y=df$rerun_tr, colour = "Training Accuracy without NA"))
rp
rp <- ggplot(df, aes(x=df$temp_x))) + ylim(0.5,1.0)
rp <- rp + geom_line(aes(y=df$rerun_tr, colour = "Training Accuracy without NA"))
rp <- rp + geom_line(aes(y= df$rerun_ts, colour = "Test Accuracy without NA"))
rp <- rp + geom_line(aes(y= df$rerun_tr1, colour = "Training Accuracy with NA"))
rp <- rp + geom_line(aes(y= df$rerun_ts1, colour = "Testing Accuracy with NA"))
rp
rp <- ggplot(df, aes(x=df$temp_x)) + ylim(0.5,1.0)
rp <- ggplot(df, aes(x=df$temp_x)) + ylim(0.5,1.0)
rp <- rp + geom_line(aes(y=df$rerun_tr, colour = "Training Accuracy without NA"))
rp <- rp + geom_line(aes(y= df$rerun_ts, colour = "Test Accuracy without NA"))
rp <- rp + geom_line(aes(y= df$rerun_tr1, colour = "Training Accuracy with NA"))
rp <- rp + geom_line(aes(y= df$rerun_ts1, colour = "Testing Accuracy with NA"))
rp
rp <- ggplot(df, aes(x=df$temp_x)) + ylim(0.6,0.9)
rp <- rp + geom_line(aes(y=df$rerun_tr, colour = "Training Accuracy without NA"))
rp <- rp + geom_line(aes(y= df$rerun_ts, colour = "Test Accuracy without NA"))
rp <- rp + geom_line(aes(y= df$rerun_tr1, colour = "Training Accuracy with NA"))
rp <- rp + geom_line(aes(y= df$rerun_ts1, colour = "Testing Accuracy with NA"))
rp
rp <- ggplot(df, aes(x=df$temp_x)) + ylim(0.7,0.8)
rp <- rp + geom_line(aes(y=df$rerun_tr, colour = "Training Accuracy without NA"))
rp <- rp + geom_line(aes(y= df$rerun_ts, colour = "Test Accuracy without NA"))
rp <- rp + geom_line(aes(y= df$rerun_tr1, colour = "Training Accuracy with NA"))
rp <- rp + geom_line(aes(y= df$rerun_ts1, colour = "Testing Accuracy with NA"))
rp
rp <- ggplot(df, aes(x=df$temp_x)) + ylim(0.7,0.8)
rp <- rp + geom_line(aes(y=df$rerun_tr, colour = "Training Accuracy without NA"))
rp <- rp + geom_line(aes(y= df$rerun_ts, colour = "Test Accuracy without NA"))
rp <- rp + geom_line(aes(y= df$rerun_tr1, colour = "Training Accuracy with NA"))
rp <- rp + geom_line(aes(y= df$rerun_ts1, colour = "Testing Accuracy with NA"))rp <- ggplot(df, aes(x=df$temp_x)) + ylim(0.7,0.8)
rp <- rp + geom_line(aes(y=df$rerun_tr, colour = "Training Accuracy without NA"))
rp <- rp + geom_line(aes(y= df$rerun_ts, colour = "Testing Accuracy without NA"))
rp <- rp + geom_line(aes(y= df$rerun_tr1, colour = "Training Accuracy with NA"))
rp <- rp + geom_line(aes(y= df$rerun_ts1, colour = "Testing Accuracy with NA"))
rp <- ggplot(df, aes(x=df$temp_x)) + ylim(0.7,0.8)
rp <- rp + geom_line(aes(y=df$rerun_tr, colour = "Training Accuracy without NA"))
rp <- rp + geom_line(aes(y= df$rerun_ts, colour = "Testing Accuracy without NA"))
rp <- rp + geom_line(aes(y= df$rerun_tr1, colour = "Training Accuracy with NA"))
rp <- rp + geom_line(aes(y= df$rerun_ts1, colour = "Testing Accuracy with NA"))
rp
rp <- ggplot(df, aes(x=df$temp_x)) + ylim(0.7,0.8)
rp <- rp + geom_smooth(aes(y=df$rerun_tr, colour = "Training Accuracy without NA"))
rp <- rp + geom_smooth(aes(y= df$rerun_ts, colour = "Testing Accuracy without NA"))
rp <- rp + geom_smooth(aes(y= df$rerun_tr1, colour = "Training Accuracy with NA"))
rp <- rp + geom_smooth(aes(y= df$rerun_ts1, colour = "Testing Accuracy with NA"))
rp
source("2.1(a)(b).R")
rp
source("2.1(a)(b).R")
rp
source("2.1(a)(b).R")
rp
ggsave(rp, filename = "Sudarshan's 2.1(b) plot ")
ggsave(rp, filename = "Sudarshan's 2.1(b) plot.png")
source("2.1(a)(b) Aadhya.R")
source("2.1(c).R")
library(klaR)
library(caret)
wdat<-read.csv('pima-indians-diabetes.csv', header=FALSE)
bigx<-wdat[,-c(9)]
bigy<-as.factor(wdat[,9])
wtd<-createDataPartition(y=bigy, p=.8, list=FALSE)
trax<-bigx[wtd,]
tray<-bigy[wtd]
model<-train(trax, tray, 'nb', trControl=trainControl(method='cv', number=10))
install.packages(e1071)
install.packages("e1071")
model<-train(trax, tray, 'nb', trControl=trainControl(method='cv', number=10))
model
warning()
model<-train(trax, tray, 'nb', trControl=trainControl(method='cv', number=10))
warnings()
teclasses<-predict(model,newdata=bigx[-wtd,])
confusionMatrix(data=teclasses, bigy[-wtd])
install.packages(e1071)
source("2.1(c).R")
confusionMatrix(data=teclasses, bigy[-wtd])
source("2.1(c).R")
wdat<-read.csv('pima-indians-diabetes.csv', header=FALSE)
library(klaR)
library(caret)
bigx<-wdat[,-c(9)] # everything but the label
bigy<-wdat[,9] # Labels
bigx
for (i in c(3, 4, 6, 8))
{
vw<-bigx[, i]==0
nbx[vw, i]=NA
}
bigx
nbx
wtd<-createDataPartition(y=bigy, p=.8, list=FALSE) # 80% train data
nbx<-bigx
ntrbx<-nbx[wtd, ] # Get partition data for x
ntrby<-bigy[wtd]  # Get parition data for y
trposflag<-ntrby>0 # Converting int to bool : 0 -> FALSE and 1 -> TRUE
ptregs<-ntrbx[trposflag, ] # Store positive dataset (1)
ntregs<-ntrbx[!trposflag,] # Store Negative dataset (0)
ntebx<-nbx[-wtd, ] # Get dataset that is for evalution/test
nteby<-bigy[-wtd]  #get label for evaluation
nbx
source("2.1(b).R")
mean(rerun_tr1)
mean(rerun_ts1)
bigx
nbx
source("2.1(a)(b).R")
rp
source("2.1(a)(b).R")
rp
source("2.1(c).R")
wdat<-read.csv('pima-indians-diabetes.csv', header=FALSE)
library(klaR)
library(caret)
bigx<-wdat[,-c(9)]
bigy<-as.factor(wdat[,9])
#REMOVE 0 -> NA
for (i in c(3, 4, 6, 8))
{
vw<-bigx[, i]==0
bigx[vw, i]=NA
}
bigx
bigy
wtd<-createDataPartition(y=bigy, p=.8, list=FALSE)
trax<-bigx[wtd,]
tray<-bigy[wtd]
trax
tray
model<-train(trax, tray, 'nb', trControl=trainControl(method='cv', number=10), na.action = na.omit)
model<-train(trax, tray, 'nb', trControl=trainControl(method='cv', number=10), na.action = na.pass)
wdat<-read.csv('pima-indians-diabetes.csv', header=FALSE)
library(klaR)
library(caret)
bigx<-wdat[,-c(9)]
bigy<-as.factor(wdat[,9])
#REMOVE 0 -> NA
for (i in c(3, 4, 6, 8))
{
vw<-bigx[, i]==0
bigx[vw, i]=NA
}
#REMOVE 0 -> NA
wtd<-createDataPartition(y=bigy, p=.8, list=FALSE)
trax<-bigx[wtd,]
tray<-bigy[wtd]
model<-train(trax, tray, 'nb', trControl=trainControl(method='cv', number=10))
teclasses<-predict(model,newdata=bigx[-wtd,])
ans <- confusionMatrix(data=teclasses, bigy[-wtd])
ans
wtd<-createDataPartition(y=bigy, p=.8, list=FALSE)
trax<-bigx[wtd,]
tray<-bigy[wtd]
model<-train(trax, tray, 'nb', trControl=trainControl(method='cv', number=10))
model
wdat<-read.csv('pima-indians-diabetes.csv', header=FALSE)
library(klaR)
library(caret)
bigx<-wdat[,-c(9)]
bigy<-as.factor(wdat[,9])
#REMOVE 0 -> NA
# for (i in c(3, 4, 6, 8))
# {
# 	vw<-bigx[, i]==0
#  	bigx[vw, i]=NA
# }
#REMOVE 0 -> NA
wtd<-createDataPartition(y=bigy, p=.8, list=FALSE)
trax<-bigx[wtd,]
tray<-bigy[wtd]
model<-train(trax, tray, 'nb', trControl=trainControl(method='cv', number=10))
teclasses<-predict(model,newdata=bigx[-wtd,])
ans <- confusionMatrix(data=teclasses, bigy[-wtd])
ans
ans
wdat<-read.csv('pima-indians-diabetes.csv', header=FALSE)
library(klaR)
library(caret)
bigx<-wdat[,-c(9)]
bigy<-as.factor(wdat[,9])
#REMOVE 0 -> NA
# for (i in c(3, 4, 6, 8))
# {
# 	vw<-bigx[, i]==0
#  	bigx[vw, i]=NA
# }
#REMOVE 0 -> NA
wtd<-createDataPartition(y=bigy, p=.8, list=FALSE)
trax<-bigx[wtd,]
tray<-bigy[wtd]
model<-train(trax, tray, 'nb', trControl=trainControl(method='cv', number=10))
teclasses<-predict(model,newdata=bigx[-wtd,])
ans <- confusionMatrix(data=teclasses, bigy[-wtd])
ans
source('2.1(c).R')
ans
ans
source('2.1(c).R')
ans
source('2.1(c).R')
ans
source("2.1(b).R")
rerun_tr1
mean(rerun_tr1)
mean(rerun_ts1)
mean(rerun_ts)
source("2.1(a)(b).R")
rp
source("2.1(a)(b).R")
rp
ggsave(rp, filename = "Sudarshan's 2.1(b) plot.png")
wdat<-read.csv('pima-indians-diabetes.csv', header=FALSE)
library(klaR)
library(caret)
bigx<-wdat[,-c(9)]
bigy<-as.factor(wdat[,9])
wtd<-createDataPartition(y=bigy, p=.8, list=FALSE)
svm<-svmlight(bigx[wtd,], bigy[wtd], pathsvm='/Users/Sudarshan/sem/CS498DF
svm_light_osx.8.4_i7/')
labels<-predict(svm, bigx[-wtd,])
foo<-labels$class
sum(foo==bigy[-wtd])/(sum(foo==bigy[-wtd])+sum(!(foo==bigy[-wtd])))
wdat<-read.csv('pima-indians-diabetes.csv', header=FALSE)
library(klaR)
library(caret)
bigx<-wdat[,-c(9)]
bigy<-as.factor(wdat[,9])
wtd<-createDataPartition(y=bigy, p=.8, list=FALSE)
svm<-svmlight(bigx[wtd,], bigy[wtd], pathsvm='/Users/Sudarshan/sem/CS498DF/svm_light_osx.8.4_i7/')
svm
source("2.1(d).R")
source("2.1(d).R")
svm_ans
source("2.1(d).R")
svn_ans
source("2.1(d).R")
svm_ans
source("2.1(d).R")
svm_ans
source("2.1(d).R")
svm_ans
temp_x
df <- data.frame(temp_x, svm_ans)
rp <- ggplot(df, aes(x=df$temp_x, y=df$svm_ans)) + ylim(70,90) + geom_line()
rp
df
df <- data.frame(temp_x, svm_ans)
rp <- ggplot(df, aes(x=df$temp_x) + ylim(70,90) +  geom_smooth(aes(y=df$svm_ans, colour = "SVM Accuracy"))
rp
rp <- ggplot(df, aes(x=df$temp_x) + ylim(70,90)
rp
rp <- ggplot(df, aes(x=df$temp_x) + ylim(70,90)
rp <- ggplot(df, aes(x=df$temp_x) + ylim(70,90))
rp <- ggplot(df, aes(x=df$temp_x) + ylim(70,90))
df <- data.frame(temp_x, svm_ans)
rp <- ggplot(df, aes(x=df$temp_x) )+ ylim(70,90)
rp <- rp  + geom_line(aes(y=df$svm_ans, colour = "SVM Accuracy"))
rp
svm_ans = svm_ans *100
temp_x <- c(1:50)
df <- data.frame(temp_x, svm_ans)
rp <- ggplot(df, aes(x=df$temp_x) )+ ylim(70,90)
rp <- rp  + geom_line(aes(y=df$svm_ans, colour = "SVM Accuracy"))
rp
svn_ans
svm_ans
svm_ans = svm_ans *100
temp_x <- c(1:50)
df <- data.frame(temp_x, svm_ans)
rp <- ggplot(df, aes(x=df$temp_x) )+ ylim(60,90)
rp <- rp  + geom_line(aes(y=df$svm_ans, colour = "SVM Accuracy"))
svm_ans = svm_ans/1000
svm_ans = svm_ans *100
temp_x <- c(1:50)
df <- data.frame(temp_x, svm_ans)
rp <- ggplot(df, aes(x=df$temp_x) )+ ylim(60,90)
rp <- rp  + geom_line(aes(y=df$svm_ans, colour = "SVM Accuracy"))
rp
svm_ans
svm_ans/10
temp_x <- c(1:50)
df <- data.frame(temp_x, svm_ans)
rp <- ggplot(df, aes(x=df$temp_x) )+ ylim(60,90)
rp <- rp  + geom_line(aes(y=df$svm_ans, colour = "SVM Accuracy"))
rp
svm_ans
svm_ans/10
svm_ans <- svm_ans/10
temp_x <- c(1:50)
df <- data.frame(temp_x, svm_ans)
rp <- ggplot(df, aes(x=df$temp_x) )+ ylim(60,90)
rp <- rp  + geom_line(aes(y=df$svm_ans, colour = "SVM Accuracy"))
rp
save.image("~/Documents/UIUC/Spring 2016/CS498DF/homework1_env.RData")
install.packages("rjson")
library(rjson)
pwd
read.csv("~/Documents/Github/CS467/myFacebookdata.csv", header = TRUE)
friends = read.csv("~/Documents/Github/CS467/myFacebookdata.csv", header = TRUE)
friends
friends = read.csv("~/Documents/Github/CS467/myFacebookdata.csv")
View(friends)
friends
View(friends)
summary(friends)
toJSON(friends, method = "C")
toJSON(friends, method ="C")
toJSON(friends)
plot(friends$Score)
library(rjson)
install.packages("EMCluster")
library(EMCluster)
set.seed(1234)
init.EM
x2 <- da2$da
x2
install.packages('gdata')
install.packages('glmnet')
library(gdata)
library(glmnet)
versio
help
clear
glmnet
setwd('~/Google Drive/CS498DF/HW Extra/')
source('binomial.R')
mean(predicted==ytest)
def_lasso_model
error_lasso
plot(def_lasso_model)
library(ggplot2)
library(MASS)
library(glmnet)
library(gdata)
X = read.table('data/matrix.txt', header = FALSE)
X = t(X)
Y = read.table('data/tumor.txt', header = FALSE)
Y[Y<0] = 0
Y[Y>0] = 1
n = nrow(X)
split = 0.7
train = sample(1:n, round(n * split))
Xtrain = X[train, ]
Xtest = X[-train, ]
ytrain = Y[train,]
ytest = Y[-train,]
def_lasso_model <- cv.glmnet(Xtrain, ytrain, alpha =1.0, type.measure = "class", nfolds = 10, family='binomial')
bestlambdalasso = def_lasso_model$lambda.min #0.0003839358
error_lasso = sum(def_lasso_model$cvm)/length(def_lasso_model$cvm) #0.201025
jpeg('def_lasso_model_graph.jpeg')
# coef(def_lasso_model, s = "lambda.min")
plot(def_lasso_model)
dev.off()
predicted = predict(def_lasso_model, as.matrix(Xtest), s = bestlambdalasso)
predicted[predicted  < 0.5] = 0
predicted[predicted  >= 0.5] = 1
mean(predicted==ytest)
plot(def_lasso_model)
error_lasso
library(ggplot2)
library(MASS)
library(glmnet)
library(gdata)
X = read.table('data/matrix.txt', header = FALSE)
X = t(X)
Y = read.table('data/tumor.txt', header = FALSE)
Y[Y<0] = 0
Y[Y>0] = 1
n = nrow(X)
split = 0.7
train = sample(1:n, round(n * split))
Xtrain = X[train, ]
Xtest = X[-train, ]
ytrain = Y[train,]
ytest = Y[-train,]
def_lasso_model <- cv.glmnet(Xtrain, ytrain, alpha =1.0, type.measure = "class", nfolds = 10, family='binomial')
bestlambdalasso = def_lasso_model$lambda.min #0.0003839358
error_lasso = sum(def_lasso_model$cvm)/length(def_lasso_model$cvm) #0.201025
jpeg('def_lasso_model_graph.jpeg')
# coef(def_lasso_model, s = "lambda.min")
plot(def_lasso_model)
dev.off()
predicted = predict(def_lasso_model, as.matrix(Xtest), s = bestlambdalasso)
predicted[predicted  < 0.5] = 0
predicted[predicted  >= 0.5] = 1
mean(predicted==ytest)
library(ggplot2)
library(MASS)
library(glmnet)
library(gdata)
X = read.table('data/matrix.txt', header = FALSE)
X = t(X)
Y = read.table('data/tumor.txt', header = FALSE)
Y[Y<0] = 0
Y[Y>0] = 1
n = nrow(X)
split = 0.7
train = sample(1:n, round(n * split))
Xtrain = X[train, ]
Xtest = X[-train, ]
ytrain = Y[train,]
ytest = Y[-train,]
def_lasso_model <- cv.glmnet(Xtrain, ytrain, alpha =1.0, type.measure = "class", nfolds = 100, family='binomial')
bestlambdalasso = def_lasso_model$lambda.min #0.0003839358
error_lasso = sum(def_lasso_model$cvm)/length(def_lasso_model$cvm) #0.201025
jpeg('def_lasso_model_graph.jpeg')
# coef(def_lasso_model, s = "lambda.min")
plot(def_lasso_model)
dev.off()
predicted = predict(def_lasso_model, as.matrix(Xtest), s = bestlambdalasso)
predicted[predicted  < 0.5] = 0
predicted[predicted  >= 0.5] = 1
mean(predicted==ytest)
error_lasso
library(ggplot2)
library(MASS)
library(glmnet)
library(gdata)
X = read.table('data/matrix.txt', header = FALSE)
X = t(X)
Y = read.table('data/tumor.txt', header = FALSE)
Y[Y<0] = 0
Y[Y>0] = 1
n = nrow(X)
split = 0.7
train = sample(1:n, round(n * split))
Xtrain = X[train, ]
Xtest = X[-train, ]
ytrain = Y[train,]
ytest = Y[-train,]
def_lasso_model <- cv.glmnet(Xtrain, ytrain, alpha =1.0, type.measure = "class", nfolds = 10, family='binomial')
bestlambdalasso = def_lasso_model$lambda.min #0.0003839358
error_lasso = sum(def_lasso_model$cvm)/length(def_lasso_model$cvm) #0.201025
jpeg('def_lasso_model_graph.jpeg')
# coef(def_lasso_model, s = "lambda.min")
plot(def_lasso_model)
dev.off()
predicted = predict(def_lasso_model, as.matrix(Xtest), s = bestlambdalasso)
predicted[predicted  < 0.5] = 0
predicted[predicted  >= 0.5] = 1
mean(predicted==ytest)
library(ggplot2)
library(MASS)
library(glmnet)
library(gdata)
X = read.table('data/matrix.txt', header = FALSE)
X = t(X)
Y = read.table('data/tumor.txt', header = FALSE)
Y[Y<0] = 0
Y[Y>0] = 1
n = nrow(X)
split = 0.7
train = sample(1:n, round(n * split))
Xtrain = X[train, ]
Xtest = X[-train, ]
ytrain = Y[train,]
ytest = Y[-train,]
def_lasso_model <- cv.glmnet(Xtrain, ytrain, alpha =1.0, type.measure = "class", nfolds = 500, family='binomial')
bestlambdalasso = def_lasso_model$lambda.min #0.0003839358
error_lasso = sum(def_lasso_model$cvm)/length(def_lasso_model$cvm) #0.201025
jpeg('def_lasso_model_graph.jpeg')
# coef(def_lasso_model, s = "lambda.min")
plot(def_lasso_model)
dev.off()
predicted = predict(def_lasso_model, as.matrix(Xtest), s = bestlambdalasso)
predicted[predicted  < 0.5] = 0
predicted[predicted  >= 0.5] = 1
mean(predicted==ytest)
error_lasso
1-0.1364499
plot(def_lasso_model)
library(ggplot2)
library(MASS)
library(glmnet)
library(gdata)
X = read.table('data/matrix.txt', header = FALSE)
X = t(X)
Y = read.table('data/tumor.txt', header = FALSE)
Y[Y<0] = 0
Y[Y>0] = 1
n = nrow(X)
split = 0.7
train = sample(1:n, round(n * split))
Xtrain = X[train, ]
Xtest = X[-train, ]
ytrain = Y[train,]
ytest = Y[-train,]
def_lasso_model <- cv.glmnet(Xtrain, ytrain, alpha =1.0, type.measure = "deviance", nfolds = 500, family='binomial')
bestlambdalasso = def_lasso_model$lambda.min #0.0003839358
error_lasso = sum(def_lasso_model$cvm)/length(def_lasso_model$cvm) #0.201025
jpeg('def_lasso_model_graph_deviance.jpeg')
# coef(def_lasso_model, s = "lambda.min")
plot(def_lasso_model)
dev.off()
predicted = predict(def_lasso_model, as.matrix(Xtest), s = bestlambdalasso)
predicted[predicted  < 0.5] = 0
predicted[predicted  >= 0.5] = 1
mean(predicted==ytest)
error_lasso
